<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAAAAAAAD/2wBDABALCwsMCxAMDBAXDw0PFxsUEBAUGx8XFxcXFx8eFxoaGhoX
        Hh4jJSclIx4vLzMzLy9AQEBAQEBAQEBAQEBAQED/2wBDAREPDxETERUSEhUUERQRFBoUFhYUGiYaGhwa
        GiYwIx4eHh4jMCsuJycnLis1NTAwNTVAQD9AQEBAQEBAQEBAQED/wAARCAJzBLADASIAAhEBAxEB/8QA
        GgABAQEBAQEBAAAAAAAAAAAAAAECBAMFBv/EAB4QAQEAAwEBAQEBAQAAAAAAAAARASFhoTFxAjJB/8QA
        GAEBAQEBAQAAAAAAAAAAAAAAAAEDBAL/xAAWEQEBAQAAAAAAAAAAAAAAAAAAkRH/2gAMAwEAAhEDEQA/
        AP26A9sQAAAAAAABUUAAAAVRFEABQAAAAAFEEFRUAABQAFQBQAABQQBQAAAAAAAVAAVAFEAUQBRAFEAV
        AFAAABAAAAEAUEVAAAABBAAAUQAEAEAFEABABAEAAUEVBBFQABRABAQABAAFQRUAKIoqAACCBRAVAAAU
        AQRagAUogFAUAAAQFQBAAAqCiiAKIAAA+iA5m4AoAAAAAIAACoAoigAAoigACgAAAAAAAACCiAKACiAK
        AAigqCoCiAKAAAAAAAAAAAAAAAAAAAAIoAICoCgAAgAACCKgAACAoIqCAAAgoACIACAKAICoAggAAKiA
        AgACKigAIIACKigAIIACKgACgCCAAAACAoAAAgAAAAgIKAAAAAAAAPogjnbqIAoigAAAAAAAIAACoAog
        CiKAAKogCgAAAAAAAKggoigAAACioAqAAAAACiAKAAAAAAAAAACAogCoCgAAAAgAAAAggAACKAAIAIAi
        gAAgCAIAAoIAgCAAKCAIIqAAAgCoIqAAigAIIqAAgACgAIgAAACAoAAAgAAgAAgKAAAAAAAICiAPoiDn
        bqIAoAAACoAogCiAKIoAAAAACAACiAKAKogCiAKIAoAAAAAAAKIIKAAAqgCAAAAAqAKIAogAAAAAAAAo
        CAAAAAAgIAAAiioACAIAAICgioIAAICgCCAIAAoIqCAIAAAgKgAAgKCAACCAACAoAgioAAIoAAAgKgAA
        CAgoAAAACAKgAACAABgMA+gA524AAAAAAAAqAKICqIoCoAogCiAKAAAAAgKgKogCiKAAAACiAKIAoAAA
        AAAAAAoACiAKIAogCiAAAAAAAAAgIAAAAACCgCAqAIAKIAACCAACAoACICAAKAIAAIgACAqAACAoIAAI
        IAAIAAIqAAAIoAAIAAAgIKAAAACAAAICAKIKAAAABhFwD6Ag5260QBRFAAAABRAFEAURQAEBUBVEAURQ
        AAFQBRFAAQAAAFBUEFEBVEUAAAAFEAUQBRAFEAUQBQAAAAAAQFEAUQAAAAAEFAEBRAQAAAUEAQQAAAEB
        QBBAEBUBQBBAEAAAQFQAAQFBAEEAAQBUBUAQAABAUAQFQBAEBUBQBAVAABBFEFAAAEBRAFEAVAAXCGAf
        QEGDdRBBRAFEUAABUAAAUQBRAFVAFEAURQAAFQRVEAUAAABUAUQBRAFEAUABUBVEAUQQUQBRAFEAUQBR
        AFEFFEAUQBRAFQABAFEBAAABQEAAQRUAAQAAUBAQBAAFBAEBAAEAAVAEABFRUABAAQAAFQQAAAEBQQBA
        EBUBQEAVAEBAFQFAAAQBUAAAAQBRARRAFEP+g+ggMHQAAogCiAKIAogCiKCiAKIIKIoAAKIAogC0QBqj
        KgohQUAABFFQBRAFEUAAAAAoAVUAUQBRAFEAUQBRAFEAUQBRAFQAAAARRRAFEKICUBUAAEBUBQBBFQAE
        AAEUVAEBAAEAAVBAAEFQBAVBAVAUAQQAAQFAQAAEBBQBAVAEBBQAAEAAAAQFEBABQEAUQBRAAABcfUMf
        Qd4gwbqIAogCiKAqAKIAohQUQqCqlAUQFUQBRFAVAFEEFEAUAFEAWlQBRFBRAFEKCiUBRFFAAAAUQBRA
        FEAUQBRAFEAFQBRAACgCAKICLUAAQBRAAAAEVFQABAABQEBAQAAAQFQBAVBAVAVAQABAAFQQAARQBAVA
        EBBQBAVAEBBQAAEAAQFKgIAiiiAAAAICiAACgCCKIApj6i4+g7hBg6FEAUQBatQBRAFEAUQQURaCiAKV
        AFVlQUQBRAFVBBRAFEUAAVRAFEAUQBRFQAAUQBRAFpUAWlQBaVAFKigAAAAAAAACAKIAogCoAACgCCKI
        AAgKIAAiiiAgIAAACCoAACAAgqAICoACAqAgACKKgCAgAIAAiioAgIKAICoAAgIqCAogoAgKIAqAqAIC
        iUBUAAEBRAFEAUx9Qx9B3AjFuogClRQWiALSoAtKgC0QQVWaoKICqIoiiALRBFVWVBRCgoigKgCiAKIA
        ogCqyqCiAKICqIAoigKgCiAKIAogCiAKIAogCiAiiAKIAqAAFSgogClQAAUBARUEBRAAAAQVAAAQABFQ
        AAQABBUAQFQABBQEBAEABFFQBAQUAQFQKAICFBFFQABAFQRUUQoKggLRAFQABARaIKLUoAAgKIoBj6i4
        +g7RKMW6iFBRAVSoqIVagC0qAqiAKrNWgolKCiVQWlQBaIINDJQaEpQUSqCiALSpQFpUKirVrKgogCiU
        oKJSgqpSgolKCiALRAFpUAUQBRFBREBqpUUAAAoAAgKIAogIogACAtEAVAABFFQBAQBRAAQVFQABKACA
        gCKKgACCgICAICoIoqAICAAIoqBQBAQEFAEBRAQCooqCAtEABARRBQBAUQBRAAqCi0qAKIAqBQFx9SmM
        7EdtKlKxdClSlBaVKUwVWaUGhmrQUSiCiUoLVZoDQlAUSgLVrKoKIAtWsqCiFFUSgLVqUoLSoAtEEFVk
        BoSlBRKAogDQgCiAKIApUAWlQQWlRQUQBRAFEAUqAKIAohQApQBKKKIAogIogAIAogACCKgKAICpRAWi
        AgCKKIACAgURRUAAQVASgAgACKKggiiAAgoAgioIoogBRAFQQRRBQBAVAAKgoqAICAKVAFoyKKIAogCi
        AKY+oY+g7alTIxbqrIDVGaUGqVlaCiUoLRKUGqVKILSoCqrIDQyoKJSg1SoILVrIYNDKmCiAKrNWgohU
        FEoC1ayoKIAogCqytBRCiqIAohUFEUBUAUQBaVAFpUAWlQBaVAFogIogCiAKIAtKhQKVAFEFRRAAAASg
        FBBFEFAEBUAAQEARRUAAQVAKgKggACggCCAAIKAgIqCKLUAAQEARRUEoKIAFQUAQRaVACiAKIKKggKIC
        BQABAUQBQRRTH1DH0HZkTP0rF0LRCiKJSgpUpRWqVmlBqlZq0FpUpTBqlZq1MFpUDBqjIDRUpQWrWaUG
        qVKVBatZpQaEpQUSlBqiUBRBBSoCtUqALSoAtKgDVKzSoNUqFBaVKAqsqCiAKIAtKgCiALSoAtEAUAAA
        QBAUQBRAFEAVBKClQBRBUAQFEAAQRUBQogCoAAgqAgACAqAAIKgIAAioCAAICoCgICAgoqJSgqUQFQFQ
        EAWogCoIoogIqAAIKKIUFRKUFKgClRAWlQoi0qUoLTGdpTGdg7M52lTOdlZY6FpUAWrWQwapWVMFEAUQ
        BVZAaEpQVazSoNUqALVZpQaEpQUSlBqlSlQWrWQGqVlaKtKlKDVGatBaVKILVrJQaEAUQBVZq0FEKgog
        CqzVBRAFogCiAKrIDQyA0MqCiAKIAohRFEoACAogCiAKgACAKJRUAQFEABAFQRUUQABAVAEBBQEAARUK
        CAqCAqAqAlAKIKAgBRAQBFFQABKKgVAFQQFEKoqJQFpUQRRCgqCKKIAtKgC1AoAlKCiAKY+pTH0HXnOx
        nOdlZt2qVmlBqlZpQapWatBaVKUGqVmlQapWatBatZoDVKyUVqrWaUwapWatTBaVKA1SslBoqUoNUrNW
        oLRKUGhmrQUQoKtZUFoggtWs0oNUqALVrIDQytQUSlBVZq0FEpQUQBRAFEUFEAUQBRBBSoAogCiCiiAK
        ggilQBaIAqAAIUFEFQEAVAAEAVBFRSoACAAIIqAoIICoCoCAAgoCAgFSgqCKLUEoioIotQABAFQqKLUE
        oiiCgIAqCUFEoIqUFAQBaJSgolQFEAUQBTGdoY+g6s52VnOdlZt2qVmlBqlZpQapWaUGqVKUGqVmlBql
        ZWirSpSoNUrNKDVKlKDVGatBRKUGqVmrUFq1mlBqlZq0FWs0qYNUqALVrNAapUAapWRBoQoKtZpRWqVK
        AqsgNDKpgogDQytBRKUFolKCrWaA1SsqiKIAolKCiUoKIAogCiAKIAqUFQEAUQAAABAVAEBBRUAAQEBB
        QBAUQEKIKAlABBQEBAQApUFAEEVBFFQQFEFQogAFSgqCKKggilQUKVAAEBaVAFQRRaIAqFSiKIUFEAUQ
        BaYzvCGPuAdOc7SpnOyvDoaozSg0M0oNUrNKYNUqUpgtWs0qDVKzVoLVrNKDQzVoKtZpQapWaVMGqtZp
        TBqlZq0wWrWaINUqUoNUrNWgtWslRWhmrQVazSg1SpSgtVkTBoSlBVZq0FEpQVWatQUQoKtZoDVEAUQB
        RFoKIVBRKUFEBFEAUQBRAFEAUqALRAAAAAQEFFQABAFQQRSoKAICoAgIKAgACACCoAgAIqAICoIotQSg
        qCKioICiIotEBAQBUEUVBAUQAEpVRUQBaIUFRKVRRKAqIAohRFEpVFEpQUx9wzVxneAdGc7SpnOys8dC
        1azSmDVKzSmDVKzSmDVKzVpgtWs0oNUrJQaq1mlTBqlZpTBulZpTBqlZq0FVmlRWqVmrQapWaUGqtZpU
        GhKUFq1mlMGqVBBoZWgolKDVKlAWrWVQWiANDK0FEpQWqyqCiANCAKIAqsiDQgCiFBRAGhAFEAUQEAQF
        BAUQBaIAogIqCUFEFCgACAgCAohVAqAAIIFQUAQFQRUVAAKlRRagCBUAECqBUBBBFFEABKVQKgIqJRRa
        lEBahUqiiAFEBFolSqKIAqUQFpUAUSgAVKCiCoq4+4ZMfcGK6M52lTOdpXhu1VrNKDVKzSg1Ss0oNUrN
        KDVKlKg1Ss0pg1Ss1aYNUrNKYNCFTFaKzSmDVWs0oNUqUqDQzVoLVrNKDVKzVBqlZEGqtZKDVKlKDVGa
        qCqzSmDVKlKYNUrNVBarIDQhQaGaVBoSlBRKA1SpQFqsiDQgCiUBRAFKigogCiAKICKIAogAAACAogCo
        AgIABUUVKAAgIqCKKgCCAoCAAlAEBUBAAQUEAQEqKKIACUVAQAEFAQAEFRaggKgiipQAEBASii0qALUo
        gKJSgolKColKoogCrj7hkx9wD2zneSs5zvJXnHQ1RmlEapWatQWlSlBqlZpTBqlSlMVatZoYNUrNVMFq
        1mlBqlZq0GqVmlBqrWaVBoqUoNUrKgtWsiYNUrNWg1Ss1aDVKzVqC1WatBaVKINUrNWgtWs0oNCUqDVK
        lKK0M1aIolKgqoCqIAqoCKrJUGhKUFEAVWSg0JSgolEFEAUQBSoCLRAFEAUQqgJQFKgIUABAAEFFQBAQ
        AogoCUAoIqAgAIVQpUBAQUBAAQVAQAEFARBFpUFASgFKgqBUAWogotKiAolKAJQRaVEUWiUoKJSgqVCg
        tKgopUQGqYzvDNXGd4B65zvKVM53krzjoapWaUwapWaUwapUDBqlZKYNUrNKmDVWs0oNUrNKDVWs0oNU
        rNWoNUrNKYNVazSmDVVmlTBqlZq0GqVmlBqrWaVBqiUoNFSiDVKzVoLVrNKDRUpUVoqANDK0FWs1agtK
        gDQgCqyqCiUoKqUBaIINCAKIA0MqIoggogCiFBRKtBRAAAAQBRARRKAAiiiAAIIqAAIKAIIAiioICoIq
        KggAIACKAIqAJQBKKgIAVKIoogIVAUCogKIKAgICAKhUUUQAKgotQqCKIAqCApUFFpUSg0iUoKuPuGau
        M7wD0zneUqZzvJUx0LSpSmC1azSmDVKzSpg1VrNKDVKzSg1Ss1aDVKzSg1Ss1amDVKzVpgtWs0pg1SpS
        oNUrNWg1Ss1agq1mlBqrWaUxWqtZog1VrJQapWatTBqlZqg1SsrQaKzVqC1WQGhKVBoqUoNUrKgtVkQa
        EKCqyoKJRBoQBaVAGqMqCiCCiAKICNCAKIAogCoAAAAgIogAAoCAAgIqAoIICoAggKAgAgKgJUBagKCF
        QQBFAQAEFQEFASlApUBAQqgJSqAlAKIURUKlUWlRKCiUqiolKC0qIC0qAKIKgIAogCrj7hkx9wDec7yV
        M53lKmOhqlZq0FpUpQWrWaUGqVmrTBarNKYNFZpUwapUpTBqlZpQaq1mlQaq1mlBqlZq0GqVmqg0VmrT
        BatZpUxWqtZAaq1mlBqrWRBqrWaA0rJUGqVKUGqJSoNFZqg1RlUFVlaCqzSg0IINCAKrKgoggqoAogDQ
        ggtEAVUAUQBRAFEBFEAUQBRAFQAABAQABAUQUAQQBFAEAEFQEABBQEBBAUBABBKqKggAIqFKgAJRQpUF
        AQEBKKFKgBSoKBUoBSoCKhUqilQApUKC0SlUUZoClQBaVAFpjO8IYzvANZ+5Kmc7ylHQ1Ss0oNUrNWgt
        KlKDVKzSoNVaxVpg1Ss0pg1VrNKYNDNWoLVrNKDVWs0oNVWaVMGqVKUGqVlag1Ss1aDRWatQapWaoNFZ
        q1BqlZq0Ghlagq1mrQWrWVBVZVBVrK0FogitCAKtQQWrWVBVZAaEKiNFSlBaVAGqVBBVZUFKgC0QBVQo
        KJRBRAAoCFAUBAFEAAQFEBAKgLUBQQQRUEUVBAVBFRUKgKgioCAAgoICoIICoIoqCACCoCFAEFAQVAQA
        EABBQEKCoIopUBAQBREoKJSqKVAFpWQFq4zvDNXH3ALnO8pUzneSjoWrWaUwapWaUwapWatMFq1mlMGq
        VmrTBatZomDVKzVoLVrNKDVWs0oNVazSpg1Ss1aYNUrNVBqlZq0GqVmrUwapWVpg1Ss1ag1RlaK0JSoN
        VazQGhKVBoqANVWaINCUoNUqCDQgDQhUFWs1QWqyqCiKCiAKqCCiFBoSgKIAqs1UFEoIogCiAKIAogIq
        AACAogoUEBRAQEFAQAEBAQUBBQQBBAUEEEARQEABBQQqKioVKCpUFASggIVQKlQFEpVAqVKqLSoUASgK
        iCiiAAhRFQqVVUqAi0qAFEAVcfcMrj7gUzneUqZzvIuN1pUDBatZAapWatBaJSoNUrNKDVKlKDVKzVoL
        VZEGqtZpTBqrWaVBqrWQGqVmrQaq1irUGlZpRWlrNKg1VZAaWs1UFqsqgq1mqC1ayqDQytBoqUQWqyoN
        CCDQgDQyqCqyoLVZUFEEGhAGioILVZAaEAVWVQUQBRAFEUAEEUAFEABAFEAVBBFEAARQBBFQRRUABBFR
        UEBUKigCCCAoIIqAIBRBQQQFQRUARQEoBRBUEEBUBQEQFqAqAgAVBRalEBRCgqCKKVAFqUQFohQVcfcM
        rj7gEzneUqZzvJVdC0qUoLVZKDVKzVoLSpSg1SsqC1WaVMGhKUGqVmqC1ayINVazSg1VrNWoLVZAaWs1
        agtWs1QVazVqDVKyoNCFQaWs0BpWSoNVWVQVWVFVWaqC1WVBoQQaEAaEog0IA0IVBVZq0FVlUFEAaEAU
        QqI0IAoigKgCiAKIIKIAohQUQEAFAQBUEEVAUAQAEEARQEAEBUEEUVBAARUEEBUEUVBFQBABBQQQRUEU
        VBFAQEBBQEABBQEAVBAVAUBCgqFKqAlAVBAUQBVx9wyuPuBWc53lKmc7yV6brVrNAapWaA1Rkpg1VrNK
        g1Ss1aYLVrNKYNVazSg1SsrUGqVmrQapWVTBqlZWg1Ss1UGhmrQaEog1VZKg0tZqitDNWoNFQBqiCDSs
        qCqytQVWVQWqyoNFQQaEEGhFBaVAGhBBoQoKqCCiKCiANCCCiKCiAKIIKICKFKAAAAAIAogIqCKKIAqC
        AqCKioACAAgKggigIACCoIIACKgCKCAoIIACKgIUCoIqKgiioVAARQEAKIKgIUFQRRaVAAQoKhUBSoKK
        VACiALVxneGVx9wDGfuUM53lK9Y6Fq1mlMGqVmqItKgKtWs0EaEKgqs1aC1azSitUqCDRUKDVWs0RGlZ
        KK0IINVWVBatZVBqjK0GhKqCqytQWrUoDQgg0tZVBoZq0GhBBoRUVRFBVZVBVQBVZVBVZUFEVBRFBRAF
        VBBRFEUQBRFQFQBRAFEAUQBRARRAAAAQABFRUAAQAEFQBAARQBBBAUEEUVCoIAiggigCCCAoIIIAigIK
        CAAgiioIIqCKAIoqCAqCApUFAQBRKAqFQFEFFEAFx9whj7gHnnO8/pUz9z+o9N2qVmlUapUogtVkoNUS
        gLVrIDVEAaGaqCrWVBatZEGlrKg1Ssqg0JRBpWVBVrNVBoZVBoqANKytQVUBWlZVBVrKoKrKg0rIg0rK
        1BVrKgqsqgqoA1RBBoQBVQQVUAURUFEoDQggpUUFEAURQABBUAUQQUQAAUBARRAAEBUEUWoAgIKCAIIA
        CCKKgioAgCAoIIIAiggKCCKgCAICggCCCKCKiglAAQUEAQQFAQAEFAEBRAFEAAQFBKCrj7hlcfcCvL+v
        uf1D+s7z+pWjdRFoCpSgolKg1SsqC0qANUrKoiqzVBatZUFVmqgqsqCqytQaKlEVqqyA0tZqoLVZWg0I
        INKyqCqgg0rKg0IINCKgqsqKqsqgqoINCKCiKgqsqCiKgoigoioKIoCoAqoIKICKqCCiAKIAoigAAACA
        gCoAACgICAICoCggCCAAgigCKgCAIqKCAIgIoIqKCCCAIoIqKCAIIIoAiggAIIqAIACKAIoAgKggKIKA
        ICiAKIAqAAuPuEMfcCvLP3P6h/X3P6le26qyqiiAKIIilQBqlQBoZqgqsqgqsqCqyqCqyoLVZVBVQQaV
        lQVWVQaEVFVWVBVQQaqsqg0IINCKCqyqDQigoioKrKoKqANCCDQioKIoKIqCiKCiCDQgCiKCiAKIqCiA
        CoAoiiAAAICiAKIAAgioAAgoAgioICoIoqCKgCAAgCAqCAoIIAioqCAogIoIAggigCKCAAgioAgCAoCC
        oCAAgoCAKgAAgqiAKIKAAC4+4RcfcCvD+vuf1D+vuf0e2wUAWiAKIAoICqyoKrKgqsqgqsqCqyqIqoIr
        Qigqsqgqsqg0IA0rKoNCKgqsqCqgg0rKoqqgg0IoKqCDQioKIoKqCCqigKgg0IqCiKCiCDQigKgCiKgK
        gCgAACKIAoioAICgACAKgCACggAAggAogIAAqCACAgAIqAIoIACCKgCKCACAioIqKIACIqKCKiogIACK
        AIoIqCCAoIAAAogKAAAAAICiAouPuEXH3APD+vuf1Kf19z+o0bKIApUAVWVoKIoACCiAirUAaEEGhFBR
        FQVWVBVQQaVlUFVFRVEUFVBBoRUFVAGhFQVUEGhFQVUAVUVBVZVFUAFVBBoRUBUUFEVAVFBRFQFQBQER
        RFAABRAFEUAAAAQAAAAEAVAABBABQQAQBUEABAAQFRAFBBAARUEABBFBFRRABERUUEBQQQQRUUEBRAAQ
        EUEVAARUAAEBVAAAQFQBQAABQXH3CGPuP1Bz/wBf6z+h/X+s/qNWyiAKIAoACoIKICNCAKqCCqgCqgg0
        IoKrKoKqCDQigqoINCKgqoCtCKgqstIKIqCqioKIoKqCCqioKqAKqKgoioCooqiKiKAKoioigAoiooqA
        igICoAoigAAqAIogCoAAACAAAIAKCAAgAIqKgioACKCKggiooIACCKgiooIAICKgioogAIioqCAoiKgC
        KigiooIAIAogAAIoAAAgAAoAoAIAgAuPuP1Fx9x+iuf+v9Z/UP6/1n9GrUAAAAABQBABFFRRBUUBUVAV
        FBQEFABVRUFEVBVRUFEUFVFQVWVRVVFQVUVAVFBVQQVUVBRFBVRUFEVBVQQUAFVFAVFQFQQVUAVUoCiK
        gKgCgIAAKIoAAgIAoACAAAIAKCAAioACKgACAAICogAICKCKioIAICKCKggiooiKigioogAiIqKCKigg
        AgCiAgAIoAAgCgAAgCgCgIIACgAAv8/cfqL/AD9x+iub+v8AWf1F/r/Wf1GjZRARQAAAFQBRFEAEFABQ
        EFABVRUBUUFAQVUVBRFBVRUFVlUFVBFaVlURoRQUBFVUVBVQBVRUFAQVUEFVFBRFQUAFAQUAFEVAVFAV
        FQAAFRQAEBUBFQABQAEAAAAEARQABAFBFQQRUAABAFRAFERUARUVEABEVFBFRUQAERUUEVFEAERFRRAF
        EAURFQBFQBFRQABAFAAEAFAAQAABQAFD+fuP0P5+4/QeP9S5+feprnoPdbQ1z01z0CkNc9Nc9ApDXPTX
        PQKRdc9Nc9ApDXPTXPQSpF1z01z0CkNc9XXPQKQ1z1dc9BKQ1z1dc9BKQ1z1dc9ApF1z01z0CkXXPV1z
        0EpDXPV1z0EpF1z1dc9BKQ1z1dc9BKRdc9XXPQKQ1z1dc9BKRdc9XXPQSkNc9XXPQKRdc9Nc9BKRdc9X
        XPQSrF1z01z0CkXXPV1z0EpF1z01z0EpF1z01z0CkXXPV1z0EpDXPV1z0EpF1z01z0CkXXPTXPQSkXXP
        TXPQKQ1z1dc9BKQ1z1cTnoFIa56a56BSLrnprnoJSGuemuegVIuuemuegVYa56a56BUhrnprnoJSGuem
        uegtIa56a56BSGuemuegVIa56a56BSJrnprnoFIa56muegUhrnprnoLSGueprnoFSGueprnoFIa56a56
        BSJrnprnoLUia56a56C0ia56muegUhrnqa56C1ImuemuegUia56muegtIa56muegtSJrnprnoFImuepr
        noLSGueprnoLSJrnprnoFSJrnqa56C0hrnqa56BSJrnprnoLSJrnprnoLSJrnprnoFImuemuegtImuem
        uegUhrnqa56BSGuemuegtImuemuegVYa56a56BSGuemuegUia56a56C1Ya56a56BSGueriXHz0EpH//Z
</value>
  </data>
</root>